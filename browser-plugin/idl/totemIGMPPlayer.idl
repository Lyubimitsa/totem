/*
 *  Copyright Â© 2006-2007, Bastien Nocera <hadess@hadess.net
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 *  Boston, MA 02111-1307, USA.
 */

#include "nsISupports.idl"

interface totemIGMPControls;
interface totemIGMPError;
interface totemIGMPDVD;
interface totemIGMPMedia;
interface totemIGMPPlaylist;
interface totemIGMPNetwork;
interface totemIGMPSettings;
interface totemIGMPPlayerApplication;
interface totemIGMPPlaylistCollection;
interface totemIGMPClosedCaption;
interface totemIGMPCdromCollection;
interface totemIGMPMediaCollection;

[scriptable, uuid(3ef61113-fc45-470b-a222-f9d3d43d9314)]
interface totemIGMPPlayer : nsISupports
{
  /* Documentation at
   * http://msdn.microsoft.com/library/en-us/wmpsdk11/mmp_sdk/playerobject.asp */
  readonly attribute totemIGMPCdromCollection cdromCollection;
  void close ();
  readonly attribute totemIGMPClosedCaption closedCaption;
  readonly attribute totemIGMPControls controls;
  attribute totemIGMPMedia currentMedia;
  attribute totemIGMPPlaylist currentPlaylist;
  readonly attribute totemIGMPDVD dvd;
  attribute boolean enableContextMenu;
  attribute boolean enabled;
  readonly attribute totemIGMPError error;
  attribute boolean fullScreen;
  attribute boolean isOnline;
  readonly attribute boolean isRemote;
  void launchURL (in AUTF8String URL);
  readonly attribute totemIGMPMediaCollection mediaCollection;
  readonly attribute totemIGMPNetwork network;
  totemIGMPMedia newMedia (in AUTF8String URL);
  totemIGMPPlaylist newPlaylist (in AUTF8String name, in AUTF8String URL);
  void openPlayer (in AUTF8String URL);
  readonly attribute long openState;
  readonly attribute totemIGMPPlayerApplication playerApplication;
  readonly attribute totemIGMPPlaylistCollection playlistCollection;
  readonly attribute long playState;
  readonly attribute totemIGMPSettings settings;
  readonly attribute AUTF8String status;
  attribute boolean stretchToFit;
  attribute ACString uiMode;
  attribute AUTF8String URL;
  readonly attribute ACString versionInfo;
  attribute boolean windowlessVideo;

  /* Signals:
   * void AudioLanguageChange (in long LangID);
   * void Buffering (in boolean Start);
   * void CdromMediaChange (in long CdromNum);
   * void Click (in long nButton, in long nShiftState, in long fX, in long fY);
   * void CurrentItemChange ();
   * void CurrentMediaItemAvailable (in AUTF8String bstrItemName);
   * void CurrentPlaylistChange (in long change);
   * void CurrentPlaylistItemAvailable (in AUTF8String bstrItemName);
   * void DomainChange (in ACString strDomain);
   * void DoubleClick (in long nButton, in long nShiftState, in long fX, in long fY);
   * void Error ();
   * void KeyDown (in long nKeyCode, in long nShiftState);
   * void KeyPress (in long nKeyAscii);
   * void KeyUp (in long nKeyCode, in long nShiftState);
   * void MarkerHit (in long MarkerNum);
   * void MediaChange (in totemIGMPMedia Item);
   * void MediaCollectionAttributeStringAdded (in AUTF8String bstrAttribName, in AUTF8String bstrAttribVal);
   * void MediaCollectionAttributeStringChanged (in AUTF8String bstrAttribName, in AUTF8String bstrOldAttribVal, in AUTF8String bstrNewAttribVal);
   * void MediaCollectionAttributeStringRemoved (in AUTF8String bstrAttribName, in AUTF8String bstrAttribVal);
   * void MediaCollectionChange ();
   * void MediaCollectionMediaAdded (in totemIGMPMedia pdispMedia);
   * void MediaCollectionMediaRemoved (in totemIGMPMedia pdispMedia);
   * void MediaError(in totemIGMPMedia pMediaObject);
   * void ModeChange (in ACString ModeName, in boolean NewValue);
   * void MouseDown (in long nButton, in long nShiftState, in long fX, in long fY);
   * void MouseMove (in long nButton, in long nShiftState, in long fX, in long fY);
   * void MouseUp (in long nButton, in long nShiftState, in long fX, in long fY);
   * void OpenPlaylistSwitch (in totemIGMPPlaylist pItem);
   * void OpenStateChange (in long NewState);
   * void PlaylistChange (in totemIGMPPlaylist Playlist, in long change);
   * void PlaylistCollectionChange ();
   * void PlaylistCollectionPlaylistAdded (in AUTF8String bstrPlaylistName);
   * void PlaylistCollectionPlaylistRemoved (in AUTF8String bstrPlaylistName);
   * void PlayStateChange (in long NewState);
   * void PositionChange (in double oldPosition, in double newPosition);
   * void ScriptCommand (in ACString scType, in AUTF8String Param);
   * void StatusChange ();
   * void StringCollectionChange (in totemIGMPStringCollection pdispStringCollection, in long change, in long lCollectionIndex);
   */
};

