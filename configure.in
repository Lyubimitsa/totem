AC_PREREQ(2.52)
AC_INIT(totem, 0.98.0, http://bugzilla.gnome.org/enter_bug.cgi?product=totem)
AC_CONFIG_SRCDIR(src/totem.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)

AC_DEFINE(PACKAGE, AC_PACKAGE_NAME, [package name])
AC_DEFINE(VERSION, AC_PACKAGE_VERSION, [package version])
AC_DEFINE(GETTEXT_PACKAGE, "AC_PACKAGE_NAME", [foo])
GETTEXT_PACKAGE=AC_PACKAGE_NAME
AC_SUBST(GETTEXT_PACKAGE)

AC_PROG_LIBTOOL()
AC_PROG_INTLTOOL([0.20])

GNOME_COMPILE_WARNINGS

dnl FreeBSD support
AC_CHECK_LIB(cam, cam_open_spec_device)

dnl xine or gst ?

GST_REQS=0.6.0.3
XINE_REQS=1.0.0

AC_ARG_ENABLE(gstreamer,
		AC_HELP_STRING([--enable-gstreamer],[use GStreamer instead of xine for the backend]),
	[case "${enableval}" in
	yes) ENABLE_GST=yes ;;
        no)  ENABLE_GST=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-gstreamer) ;;
	esac],
	[ENABLE_GST=no]) dnl Default value

AC_MSG_CHECKING(for backend libraries)

if test x$ENABLE_GST = xyes; then

dnl Now we're ready to ask for gstreamer libs and cflags
dnl And we can also ask for the right version of gstreamer
	HAVE_GSTREAMER=no

dnl start with 0.7
	GST_MAJORMINOR=0.7
	PKG_CHECK_MODULES(GST, \
			gstreamer-play-$GST_MAJORMINOR >= $GST_REQS \
			gstreamer-gconf-$GST_MAJORMINOR >= $GST_REQS,
			HAVE_GSTREAMER=yes,HAVE_GSTREAMER=no)

dnl try 0.6
	if test "x$HAVE_GSTREAMER" = "xno"; then
		GST_MAJORMINOR=0.6
		PKG_CHECK_MODULES(GST, \
			gstreamer-play-$GST_MAJORMINOR >= $GST_REQS \
			gstreamer-gconf-$GST_MAJORMINOR >= $GST_REQS,
			HAVE_GSTREAMER=yes,HAVE_GSTREAMER=no)
	fi

dnl Give error and exit if we don't have gstreamer
	if test "x$HAVE_GSTREAMER" = "xno"; then
		AC_MSG_ERROR(you need gstreamer development packages installed !)
	fi

	MM="gstreamer-libs-$GST_MAJORMINOR >= $GST_REQS gstreamer-play-$GST_MAJORMINOR >= $GST_REQS gstreamer-gconf-$GST_MAJORMINOR >= $GST_REQS"

	AC_MSG_RESULT(GStreamer)
else
	MM="libxine >= $XINE_REQS gconf-2.0"
	AC_MSG_RESULT(xine)
fi
AM_CONDITIONAL(TOTEM_GST, test x$ENABLE_GST = "xyes")

dnl Seems that the order matters because libtool blows
PKG_CHECK_MODULES(EXTRA_GNOME, glib-2.0 >= 2.1.0 libgnomeui-2.0 >= 2.1.1 libglade-2.0 gnome-vfs-2.0 >= 2.1.6 gnome-desktop-2.0 >= 2.1.5 $MM)
EXTRA_GNOME_CFLAGS="$EXTRA_GNOME_CFLAGS"
EXTRA_GNOME_LIBS="$EXTRA_GNOME_LIBS"
AC_SUBST(EXTRA_GNOME_CFLAGS)
AC_SUBST(EXTRA_GNOME_LIBS)

PKG_CHECK_MODULES(GTK, gtk+-2.0 $MM gthread-2.0)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

AC_ARG_ENABLE(lirc,
	AC_HELP_STRING([--enable-lirc],[enable lirc support]),
	[case "${enableval}" in
	yes) ENABLE_LIRC=yes ;;
	no)  ENABLE_LIRC=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-lirc) ;;
	esac],
        [ENABLE_LIRC=yes]) dnl Default value

if test x$ENABLE_LIRC = xyes ; then
AC_CHECK_HEADER(irman.h,,)
REMOTE_LIBS=""
AC_CHECK_LIB(lirc_client, lirc_init, [
	AC_CHECK_HEADER(lirc/lirc_client.h, [
	REMOTE_LIBS="-llirc_client"
	AC_DEFINE(HAVE_REMOTE, 1, [defined if you have lirc library])
	])
])
fi

AC_SUBST(REMOTE_LIBS)

AC_PATH_X

CFLAGS="-I$x_includes $CFLAGS"
LIBS="-L$x_libraries $LIBS"

XTEST_LIBS=""
AC_CHECK_LIB(Xtst, XTestFakeKeyEvent,
		XTEST_LIBS="-lXtst -L$x_libraries"
		AC_DEFINE(HAVE_XTEST, 1, [defined if you have XTest library]),
		,
		"-L$x_libraries")
AC_SUBST(XTEST_LIBS)

dnl Multimedia keys
have_xfree=no
AC_TRY_COMPILE([
	#include <X11/XF86keysym.h>
	],[
	int arg = 0;
	],[
	have_xfree=yes
])
AC_MSG_CHECKING(for X11 XFree86 headers)
AC_MSG_RESULT($have_xfree)
if test x"$have_xfree" = "xyes" ; then
	AC_DEFINE(HAVE_XFREE, 1, [defined if you have X11/XF86keysym.h])
fi

have_xsun=no
AC_TRY_COMPILE([
	#include <X11/Sunkeysym.h>
	],[
	int arg = 0;
	],[
	have_xsun=yes
])
AC_MSG_CHECKING(for X11 Sun headers)
AC_MSG_RESULT($have_xsun)
if test x"$have_xsun" = "xyes" ; then
	AC_DEFINE(HAVE_XSUN, 1, [defined if you have X11/Sunkeysym.h])
fi

if test x"$have_xsun" = "xno" && test x"$have_xfree" = "xno" ; then
	AC_MSG_ERROR(Your system doesn't have any headers for multimedia buttons)
fi

AC_MSG_CHECKING(for broken old architecture)
if test "`uname -m`x" = "i686x" ; then
       AC_MSG_RESULT(h0rk3d)
else
       AC_MSG_RESULT(n334)
fi
AC_MSG_CHECKING(for broken user)
if test "`whoami`x" = "hadessx" ; then
       AC_MSG_RESULT(h0rk3d)
else
       AC_MSG_RESULT(n334)
fi

AC_MSG_CHECKING(for Linux)
case `uname` in
	*Linux*)
	AC_MSG_RESULT(yes)
	IS_LINUX="yes"
	;;
	*)
	AC_MSG_RESULT(no)
	IS_LINUX="no"
	;;
esac
AM_CONDITIONAL(HAVE_LINUX, `test x$IS_LINUX = xyes`)

AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

dnl debug
AC_ARG_ENABLE(debug,
		AC_HELP_STRING([--disable-debug],[disables compilation of debugging messages]),
	[case "${enableval}" in
	yes) ENABLE_DEBUG=yes ;;
	no)  ENABLE_DEBUG=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-debug) ;;
	esac],
[ENABLE_DEBUG=no]) dnl Default value
if test x$ENABLE_DEBUG = xyes; then
	AC_DEFINE(TOTEM_DEBUG, 1, [Define if DEBUG statements should be compiled in])
fi

dnl Add the languages which your application supports here.
ALL_LINGUAS="am be ca cs da de en_GB es et fi fr ga it ja ko lv ms nl no pl pt pt_BR ru sr sr@Latn sv tr uk vi"
AM_GLIB_GNU_GETTEXT

AC_OUTPUT([
Makefile
totem.spec
src/Makefile
data/Makefile
po/Makefile.in
])
